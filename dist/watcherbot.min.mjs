import e from"puppeteer";import t from"fs";class o{constructor({url:e,watchLength:o=60,watcherName:s="",logEnabled:a=!0,logDetails:i=!1,logTime:l=!1}={}){let h;try{h=JSON.parse(t.readFileSync(process.cwd()+"/watcherbot.config.json","utf-8"))}catch(e){h=void 0}this._target=h?.url||e,null!=this._target&&""!=this._target||(this.log.noURL(),process.exit()),this._refreshCycle=this._assertRefreshCycle({watchlength:h?.watchLength||o}),this._lastRequestTimeStamp=void 0,this._logEnabled=h?.logEnabled||a,this._logDetails=h?.logDetails||i,this._logTime=h?.logTime||l,this.watchesTaken=0,this.theWatchersName=h?.watcherName||s}_assertRefreshCycle({watchLength:e}){if(0==e||null==e||null==e)return;const t=1e3*e;return t>100?t:100}get _remainingOffset(){const e=Date.now(),t=(null==this._lastRequestTimeStamp?e:this._lastRequestTimeStamp)+this._refreshCycle-e;return t>0?t:(this._log.offsetOvertime(t),this._refreshCycle)}_log={colorCyan:"[36m%s[0m",colorBlue:"[34m%s[0m",colorOrange:"[31m%s[0m",colorGreen:"[32m%s[0m",botName:`The Watcher${this.botName?`@${this.botName}`:""}:`,update:()=>{const e=(new Date).toLocaleTimeString();console.log(this._log.colorCyan,`${this._log.botName}${this._logTime?`@${e}`:""} Still watching...`)},details:e=>{console.log(this._log.colorBlue,`${this._log.botName} Cycle ${this.watchCycles}. Last cycle was approximately ${this._refreshCycle-e}ms.`)},noURL:()=>{console.log(this._log.colorOrange,`${this._log.botName} The specified URL is either undefined or empty.`)},noWatch:()=>{console.log(this._log.colorOrange,`${this._log.botName} There is nothing to watch for. Pass a 'watching' function to the 'takeWatch' function.`)},offsetOvertime:e=>{console.log(this._log.colorOrange,`${this._log.botName} The request took ${e}ms longer then the specified offset. Timings may not be accurate anymore. Try increasing the 'config.timeToRefresh' value.`)},watchEnd:()=>{console.log(this._log.colorGreen,`${this._log.botName} And now my watch has ended...`)},tellATaleOfTime:()=>{console.log(this._log.colorGreen,`I stood watch for ${(Date.now()-this.watchStarted)/1e3} seconds.`)},tellATaleOfEndurance:()=>{console.log(this._log.colorGreen,`I completed ${this.watchesTaken<=1?`${this.watchesTaken} watch`:`${this.watchesTaken} watches`} in this time.`)}};async takeWatch({endOfWatch:t,dangerDrawsNear:o,watching:s}={}){null==s&&(this._log.noWatch(),process.exit()),this.watchStarted=Date.now();const a=await e.launch({args:["--no-sandbox","--disable-setuid-sandbox"]}),i=await a.newPage();await i.goto(this._target);const l=t?t.bind(this,{page:i,browser:a,theWatcher:this}):void 0,h=o?o.bind(this,{page:i,browser:a,theWatcher:this}):void 0,n=async({reload:e=!0}={})=>{this.watchesTaken++,e&&await i.reload();const t=this._remainingOffset;this._logEnabled&&this._log.update(),this._logDetails&&this._log.details(t),setTimeout((async()=>{this._lastRequestTimeStamp=Date.now(),await s({endOfWatch:l,dangerDrawsNear:h,theWatcher:this,keepWatching:n,page:i,browser:a})}),t)};n()}tellATale({time:e=!0,watches:t=!0}={}){this._log.watchEnd(),t&&this._log.tellATaleOfEndurance(),e&&this._log.tellATaleOfTime()}}export{o as WatcherBot};
